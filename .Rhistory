fig.aligh='center'
par(fig.align='center')
?par
ttt
ttt[1,]
ttt[2,]
View(ttt)
?R.options
?option
ttt[1]
ttt[2]
ttt[3]
ttt[4]
ttt[-1]
ttt
ttt[-1,]
ttt[1:3]
ttt[1:4]
ttt[1:3,]
ttt[1:6]
ttt[1:7]
ttt[1:6,]
mtcars$mpg
mtcars$mpg[c(-18,20)]
mtcars$mpg[c(-18,-20)]
mtcars$mpg[18]
install.packages("carot")
99/1099
install.packages("C:/Users/Mark/Desktop/caret_6.0-52.zip", repos = NULL)
library(carot)
library(caret)
install.packages("foreach")
library(caret)
library(car)
install.packages("car")
install.packages("reshape2")
library(reshape2)
library(foreach)
library(plyr)
library(lattice)
library(ggplot2)
library(nlme)
library(BradleyTerry2)
install.packages("BradleyTerry2")
library(caret)
library(kernlab)
install.packages("kernlab")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
concrete
names(concrete)
hist(Superplasticizer)
hist(concrete$Superplasticizer)
hist(log10(concrete$Superplasticizer))
hist(concrete$Superplasticizer)
hist(log10(concrete$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
substring(names(training),1,2)
substring(names(training),1,2)=="IL"
need<-substring(names(training),1,2)=="IL"
training[,need]
data<-training[,need]
names(data)
prcomp(data)
summary(prcomp(data))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
substr(names(training),1,2)
tr<-substr(names(training),1,2)=="IL"
training[,tr]
data<-training[,tr]
data<-training[,"diagnosis"]
data
data<-training[,tr]
data1<-training[,"diagnosis"]
cbind(data,data1)
dat<-cbind(data,data1)
train(diagnosis ~ ., data=dat, method="glm")
dar
dat$diagnosis
View(dat)
data<-training[,tr]
tr
names(training)
tr[1]<-TRUE
data<-training[,tr]
train(diagnosis ~ ., data=data, method="glm")
install.packages("e1071")
train(diagnosis ~ ., data=data, method="glm")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(concrete$SuperPlasticizer)
concrete$SuperPlasticizer
training$SuperPlasticizer
names(concrete)
hist(concrete$Superplasticizer)
hist(log10(concrete$Superplasticizer))
hist(log(concrete$Superplasticizer))
hist(concrete$Superplasticizer)
concrete$Superplasticizer==0
log(concrete$Superplasticizer)
hist(log(concrete$Superplasticizer))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
need
training[,need]
data<-training[,need]
procomp(data)
prcomp(data)
summary(prcomp(data))
names(training)
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.9)
preObj
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
preObj
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
grep("^[Ii][Ll].*", names(training))
need
summary(prcomp(training[, IL_col_idx]))
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("pca"), thresh=0.8)
preObj
summary(preobj)
?pca
?prcomp
procomp(data,center=TRUE,scale=TRUE)
prcomp(data,center=TRUE,scale=TRUE)
summary(prcomp(data,center=TRUE,scale=TRUE))
install.packages("rattle")
library(rpart)
library(pgmm)
install.packages("pgmm")
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
se<-segmentationOriginal
names(se)
names(se)[1]
names(se)[2]
names[,2]
se[,2]
train<-se[se[,2]=="Train"]
train<-se[se[,2]=="Train",]
test<-se[se[,2]=="Test",]
seed(125)
set.seed(125)
model<-train(Class~.,data=train,method="rpart")
fancyRpartPlot
library(rattle)
fancyRpartPlot
fancyRpartPlot(model$finalModel)
library(rpart)
library(ggpot2)
library(ggplot2)
library(rattle)
fancyRpartPlot(model$finalModel)
fancyRpartPlot(model)
model
model$finalModel
plot(model$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
model<-train(Area~.,data=olive,method="rpart")
newdata = as.data.frame(t(colMeans(olive)))
predict(model,newdat)
predict(model,newdata)
head(olive,2)
head(olive,3)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
summary(modelSA)
trainSA$chd
trainSA$chd<-factor(trainSA$chd)
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
summary(modelSA)
testSA$chd<-factor(testSA$chd)
predict(modelSA,testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missclass(predict(modelSA,testSA),testSA$chd)
missClass(predict(modelSA,testSA),testSA$chd)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
missClass(trainSA$chd,predict(modelSA,trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
t<-vowel.test
tr<-vowel.train
t$y<-factor(t$y)
tr$y<-factor(tr$y)
model<-train(y~.,data=t,method="rf")
set.seed(33833)
model<-train(y~.,data=t,method="rf")
varImp(model)
a<-varImp(model)
order(a)
a
order(a$Overall)
a$Overall
str(a)
class(a)
order(a$importance)
varImp(model)
a$importance
a$importance$Overall
diff(a$importance$Overall)
order(a$importance)
varImp(model)
model<-train(y~.,data=tr,method="rf")
a<-varImp(model)
a
order(a)
order(varImp(model))
order(varImp(model),decreasing=TRUE)
order(varImp(model)$importance,decreasing=TRUE)
install.packages("quantmod")
ï¼Ÿquantmod
?quantmod
?quantmod
install.packages("quantdl")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<- as.factor(vowel.train$y)
vowel.test$y<- as.factor(vowel.test$y)
modelFit1_rf<- train(y~.,data=vowel.train,method="rf")
library(caret)
vowel.train$y<- as.factor(vowel.train$y)
vowel.test$y<- as.factor(vowel.test$y)
modelFit1_rf<- train(y~.,data=vowel.train,method="rf")
install.packages("shiny")
install.packages("httpuv")
install.packages("httpuv")
install.packages("C:/Users/Mark/Desktop/shiny_0.12.2.zip", repos = NULL)
library(shiny)
library(shiny)
install.packages("mime")
install.packages("mime")
install.packages("jsonlite")
install.packages("xtable")
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("htmltools")
library(digest)
install.packages("digest")
library(digest)
install.packages("htmltools")
install.packages("R6")
library(shiny)
train<-read.csv("C:\\Users\\Mark\\Desktop\\pml-training.csv",na.strings=c("", "NA", "#DIV/0!"))
setwd("C:\\Users\\Mark\\Desktop\\MachineLearning")
train<-read.csv("\\data\\pml-training.csv",na.strings=c("", "NA", "#DIV/0!"))
train<-read.csv("~\\data\\pml-training.csv",na.strings=c("", "NA", "#DIV/0!"))
gwtwd
getwd
getwd()
train<-read.csv(".\\data\\pml-training.csv",na.strings=c("", "NA", "#DIV/0!"))
test<-read.csv(".\\data\\pml-testing.csv",na.strings=c("", "NA", "#DIV/0!"))
names(train)
library(caret)
set.seed(323)
train$classe
data_t<-createDataPartition(train,p=0.6,list=FALSE)
data_t<-createDataPartition(train$classe,p=0.6,list=FALSE)
View(data_t)
index_t<-createDataPartition(train$classe,p=0.6,list=FALSE)
data_t<-train[index_t,]
data_v<-train[-index_t,]
summary(index_t)
nearZeroVar(train)
rmindex<-sapply(train,function(x){sum(is.na(x))})
rmindex
sapply(train,function(x){sum(x=="")})
rmindex<-sapply(train,function(x){sum(is.na(x))})
rmindex<-rmindex!=0
rmindex
train<-train[,-rmindex]
test<-test[,-rmindex]
names(train)
head(train,1)
setwd("C:\\Users\\Mark\\Desktop\\MachineLearning")
train<-read.csv(".\\data\\pml-training.csv",na.strings=c("", "NA", "#DIV/0!"))
test<-read.csv(".\\data\\pml-testing.csv",na.strings=c("", "NA", "#DIV/0!"))
set.seed(323)
rmindex<-nearZeroVar(train)
train<-train[,-rmindex]
test<-test[,-rmindex]
rmindex<-nearZeroVar(train)
train<-train[,-rmindex]
test<-test[,-rmindex]
setwd("C:\\Users\\Mark\\Desktop\\MachineLearning")
train<-read.csv(".\\data\\pml-training.csv",na.strings=c("", "NA", "#DIV/0!"))
test<-read.csv(".\\data\\pml-testing.csv",na.strings=c("", "NA", "#DIV/0!"))
library(caret)
## Exclude variables with no variance
rmindex<-nearZeroVar(train)
train<-train[,-rmindex]
test<-test[,-rmindex]
rmindex<-sapply(train,function(x){sum(is.na(x))})
rmindex<-rmindex==0
rmindex<-sapply(train,function(x){sum(is.na(x))})
rmindex<-rmindex==0
rmindex==0
rmindex<-sapply(train,function(x){sum(is.na(x))})
rmindex==0
rmindex<-(rmindex==0)
rmindex
train[,rmindex]
temp<-train[,rmindex]
rmindex<-sapply(train,function(x){sum(is.na(x))})
rmindex<-(rmindex==0)
train<-train[,rmindex]
test<-test[,rmindex]
names(test)
train[1,]
train[2,]
train$new_windpw
train$new_window
train$num_window
train$X
train$raw_timestamp_part_1
greg(names,"timestamp")
find(names,"timestamp")
grep(names,"timestamp")
grep(names(train),"timestamp")
?grep
grep("timestamp",names(train),value=TRUE)
rmindex<-grep("timestamp",names(train),value=TRUE)
train[,rmindex]
?train
set.seed(323)
index_t<-createDataPartition(train$classe,p=0.6,list=FALSE)
data_t<-train[index_t,]
data_v<-train[-index_t,]
library(randomForest)
model<-train(classe~.,data=data_t,method="rf",ntree=10,importance=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
result_t<-predict(model,data_t)
print(confusionMatrix(result_t,data_t$classe))
result_v<-predict(model,data_v)
print(confusionMatrix(result_v,data_v$classe))
result_v<-predict(model,test)
result<-predict(model,test)
result
setwd("C:\\Users\\Mark\\Desktop\\MachineLearning")
train<-read.csv(".\\data\\pml-training.csv",na.strings=c("", "NA", "#DIV/0!"))
test<-read.csv(".\\data\\pml-testing.csv",na.strings=c("", "NA", "#DIV/0!"))
library(caret)
## Exclude variables with no variance
rmindex<-nearZeroVar(train)
train<-train[,-rmindex]
test<-test[,-rmindex]
## Exclude variables with too much NA
rmindex<-sapply(train,function(x){sum(is.na(x))})
rmindex<-(rmindex==0)
train<-train[,rmindex]
test<-test[,rmindex]
##Exclude personal Info variables
rmindex<-c("X","user_name")
train<-train[,-rmindex]
test<-test[,-rmindex]
## Exclude time stamp
rmindex<-grep("timestamp",names(train),value=TRUE)
train<-train[,-rmindex]
test<-test[,-rmindex]
test<-test[,-rmindex]
rmindex<-c("X","user_name")
train<-train[,-rmindex]
train[,rmindex]
train[,-rmindex]
train[,!names(train)%in%rmindex]
setwd("C:\\Users\\Mark\\Desktop\\MachineLearning")
train<-read.csv(".\\data\\pml-training.csv",na.strings=c("", "NA", "#DIV/0!"))
test<-read.csv(".\\data\\pml-testing.csv",na.strings=c("", "NA", "#DIV/0!"))
library(caret)
## Exclude variables with no variance
rmindex<-nearZeroVar(train)
train<-train[,-rmindex]
test<-test[,-rmindex]
## Exclude variables with too much NA
rmindex<-sapply(train,function(x){sum(is.na(x))})
rmindex<-(rmindex==0)
train<-train[,rmindex]
test<-test[,rmindex]
##Exclude personal Info variables
rmindex<-c("X","user_name")
train<-train[,!names(train)%in%rmindex]
test<-test[,!names(train)%in%rmindex]
## Exclude time stamp
rmindex<-grep("timestamp",names(train),value=TRUE)
train<-train[,!names(train)%in%rmindex]
test<-test[,!names(train)%in%rmindex]
library(caret)
## Exclude variables with no variance
rmindex<-nearZeroVar(train)
train<-train[,-rmindex]
test<-test[,-rmindex]
## Exclude variables with too much NA
rmindex<-sapply(train,function(x){sum(is.na(x))})
rmindex<-(rmindex==0)
train<-train[,rmindex]
test<-test[,rmindex]
##Exclude personal Info variables
rmindex<-c("X","user_name")
train<-train[,!names(train)%in%rmindex]
test<-test[,!names(test)%in%rmindex]
## Exclude time stamp
rmindex<-grep("timestamp",names(train),value=TRUE)
train<-train[,!names(train)%in%rmindex]
test<-test[,!names(test)%in%rmindex]
setwd("C:\\Users\\Mark\\Desktop\\MachineLearning")
train<-read.csv(".\\data\\pml-training.csv",na.strings=c("", "NA", "#DIV/0!"))
test<-read.csv(".\\data\\pml-testing.csv",na.strings=c("", "NA", "#DIV/0!"))
library(caret)
## Exclude variables with no variance
rmindex<-nearZeroVar(train)
train<-train[,-rmindex]
test<-test[,-rmindex]
## Exclude variables with too much NA
rmindex<-sapply(train,function(x){sum(is.na(x))})
rmindex<-(rmindex==0)
train<-train[,rmindex]
test<-test[,rmindex]
##Exclude personal Info variables
rmindex<-c("X","user_name")
train<-train[,!names(train)%in%rmindex]
test<-test[,!names(test)%in%rmindex]
## Exclude time stamp
rmindex<-grep("timestamp",names(train),value=TRUE)
train<-train[,!names(train)%in%rmindex]
test<-test[,!names(test)%in%rmindex]
set.seed(323)
index_t<-createDataPartition(train$classe,p=0.6,list=FALSE)
data_t<-train[index_t,]
data_v<-train[-index_t,]
library(randomForest)
model<-train(classe~.,data=data_t,method="rf",ntree=10,importance=TRUE)
result_t<-predict(model,data_t)
print(confusionMatrix(result_t,data_t$classe))
result_v<-predict(model,data_v)
print(confusionMatrix(result_v,data_v$classe))
result<-predict(model,test)
print(result)
answers <- as.vector(result)
pml_write_files = function(x) {
n = length(x)
for (i in 1:n) {
filename = paste0("problem_id_", i, ".txt")
write.table(x[i], file = filename, quote = FALSE, row.names = FALSE,
col.names = FALSE)
}
}
pml_write_files(answers)
